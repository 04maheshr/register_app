import os
import pdfplumber
import pandas as pd

def extract_borderless_tables(page):
    lines = page.lines
    words = page.extract_words()
    # Additional processing to convert lines and words into tables
    # This part of the code depends on the structure of your PDF
    # Here, we attempt to parse based on the relative positions of words
    data = []
    current_row = []
    last_bottom = None

    for word in words:
        if last_bottom is None or abs(word['bottom'] - last_bottom) < 5:
            current_row.append(word['text'])
        else:
            data.append(current_row)
            current_row = [word['text']]
        last_bottom = word['bottom']
    data.append(current_row)

    return data

def extract_marks_from_pdf(pdf_path, reg_numbers):
    marks_dict = {}
    with pdfplumber.open(pdf_path) as pdf:
        for page_num, page in enumerate(pdf.pages):
            tables = page.extract_tables()
            if not tables:
                tables = [extract_borderless_tables(page)]
            for table_num, table in enumerate(tables):
                df = pd.DataFrame(table)
                for reg_number in reg_numbers:
                    for index, row in df.iterrows():
                        if reg_number in row.values:
                            reg_index = row.values.tolist().index(reg_number)
                            if reg_index + 1 < len(row):
                                marks_dict[reg_number] = row.iloc[reg_index + 1]
    return marks_dict

def process_pdfs_in_folder(folder_path, reg_numbers):
    results = {}
    pdf_files = [f for f in os.listdir(folder_path) if f.endswith('.pdf')]
    for filename in pdf_files:
        pdf_path = os.path.join(folder_path, filename)
        marks = extract_marks_from_pdf(pdf_path, reg_numbers)
        for reg_number, marks_value in marks.items():
            if reg_number not in results:
                results[reg_number] = {}
            results[reg_number][os.path.splitext(filename)[0]] = marks_value
    return results

# Example usage for a folder containing multiple PDFs
if __name__ == '__main__':
    folder_path = '/content/drive/MyDrive/projects'  # Path to the folder containing PDF files
    reg_numbers = ['RA2211027040046', 'RA2211027040056','RA2211027040027']  # List of registration numbers

    results = process_pdfs_in_folder(folder_path, reg_numbers)
    df = pd.DataFrame(results).fillna('Not Found')
    df_transposed = df.transpose()
    print(df_transposed)
     # Save the resulting DataFrame to an Excel file
    output_path = os.path.join(folder_path, 'results.xlsx')
    df_transposed.to_excel(output_path, index=True)
    print(f"Results saved to {output_path}")
